// Package repository contains utilities abstracting git repositories configuration
// and source code pulling
package repository

import (
	"time"

	"github.com/fredjeck/configserver/internal/configuration"
)

const logKeyRepositoryName = "repository.name"
const logKeyCheckoutLocation = "repository.checkout_location"
const logKeyRepositoryURL = "repository.url"

// Repository is a handle on a git repository
type Repository struct {
	Configuration *configuration.Repository // repository configuration
	Statistics    *Statistics               // repository access statistics
	Beholder      *Beholder                 // beholder process managing the repository
}

// Statistics allows to maintain some stats about repository access
type Statistics struct {
	HitCount   int64     `json:"hitCount"`
	LastUpdate time.Time `json:"lastUpdate"`
	NextUpdate time.Time `json:"nextUpdate"`
	LastError  error     `json:"lastError"`
}

// UpdateEvent as generated by beholders
type UpdateEvent struct {
	RepositoryName string
	LastUpdate     time.Time
	NextUpdate     time.Time
	LastError      error
	Active         bool
}

// IsClientAllowed verifies if the provided ClientID is allowed to access the repository based on its configuration
func (repo *Repository) IsClientAllowed(ClientID string) bool {
	for _, client := range repo.Configuration.Clients {
		if client == ClientID {
			return true
		}
	}
	return false
}
